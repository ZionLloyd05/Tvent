
</script>
{{!-- <script src="/javascripts/index.js"></script> --}}
<main role="main">
    {{# each event}}
      <!-- Main jumbotron for a primary marketing message or call to action -->
    <div class="jumbotron ev-jumbo" style="background-image:url('/uploads/{{this.posterUrl}}'); border-radius:0;margin-bottom:0" id="overlay">
        
    </div>
    <div class="container ev-container" style="margin-bottom:60px">
        <div class="row">
            <div class="col-8">
                <p class="display-4" style="font-size:2.7rem" id="title">{{this.title}}</p>
            </div>
            <div class="col-4">
                <button class="btn btn-lg" ev-ref="{{this.reference}}" ev-id="{{this._id}}" ev-status="{{this.status}}" ev-cat="{{this.category}}" id="regBtn" style="width:100%">Register for Event</button>
            </div>
            <hr style="padding-bottom: 20px;width: 90%;">
            <div class="row ev-desc" style="width: 90%;margin: 0 auto;">
                <div class="col-6 mb-3">
                    <h3 class="display-4">Description</h3>
                    <p style="text-align:justify">{{this.description}}</p>
                </div>
                <div class=" mb-3 col-2">
                    
                </div>
                <div class="col-4 mb-3">
                    <h3 class="display-4">Date & Time</h3>
                    <p style="font-size:15px">{{formatDate this.start}}, {{this.starttime}} - {{formatDate this.end}}, {{this.endtime}}</p>
                </div>
                <div class="col-5 mb-3">
                    <h3 class="display-4">Location</h3>
                    <p style="text-align:justify">{{this.location}}</p>
                </div>
                <div class="col-3 mb-3">
                    
                </div>
                <div class="col-4 mb-3" id="tagBody">
                    <h3 class="display-4">Tags</h3>
                    <div class="" id="loader_tag" style="text-align: center; padding-top: 10px;">
                       <div class="loader"></div>
                    </div>
                </div>  
                <div class="col-12 mt-3" style="margin:0 auto;">
                    <h3 class="display-4">Allocation</h3>
                    <table class="table" style="font-size:13px">
                        <thead>
                            <tr>
                                <th scope="col">Day</th>
                                <th scope="col">Division</th>
                                <th scope="col">Registered</th>
                                <th scope="col">Capacity</th>
                            </tr>
                        </thead>
                        <tbody id="allocationBody">
                            <div class="" id="loader_allocation" style="text-align: center;">
                                <div class="loader"></div>
                            </div>
                        </tbody>
                    </table>
                </div>
            </div>            
            <hr style="padding-bottom: 20px;width: 90%;">
            <div class="col-12 text-center">
                <h2 class="display-4">Event Organizer</h2>
                <p>{{this.organizer}}</p>
            </div>
        </div>
    </div>

    <!-- Ticket Modal -->
    <div class="modal fade" id="ticketModal"  data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="ticketModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ticketModalLabel">Setting up your ticket</h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-9" id="conv-form" style="display:none;margin:0 auto;">
                        <select id="faculty" class="custom-select custom-select-sm mb-3">
                            <option selected>Select Faculty</option>
                        </select>
                        
                        <div class="input-group input-group-sm mb-3">
                            <input type="number" id="gno" placeholder="Enter number of gaurdian" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
                            <div class="invalid-feedback" id="invalid-feedback" style="width: 100%;"></div>
                        </div>
                        <div id="gdiv">

                        </div>
                    </div>
                    <div class="col-12" style="display:none;" id="others">
                        <p style="font-size:2.0rem" class="display-4">See you at {{this.title}}</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm" data-dismiss="modal" id="modClose1"  style="width:50%;">Close</button>
                <button class="btn btn-sm" id="tickBtn" disabled style="width:50%; margin:0 auto">Get My Ticket</button>
            </div>
            </div>
        </div>
    </div>
    
    {{/each}}
    
    <input type="hidden" name="_csrf" id="_csrf" value="{{ csrfToken }}">
    {{#if login}}
        <input type="hidden" id="isLoggedIn" value='true'>
    {{else}}
        <input type="hidden" id="isLoggedIn" value='false'>
    {{/if}}

       <!-- Ticket Modal -->
    <div class="modal fade" id="accountModal"  data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="accountModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="accountModalLabel">Quick Account Set Up</h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-9" id="acc-form" style="margin:0 auto;">
                       <div class="input-group input-group-sm mb-3">
                            <input type="email" id="email" placeholder="Enter your email" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm" value="">
                            <div class="invalid-feedback" id="invalid-feedback" style="width: 100%;"></div>
                        </div>
                        <div class="input-group input-group-sm mb-3">
                            <input type="password" id="password" placeholder="Enter your password" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm" value="">
                            <div class="invalid-feedback" id="invalid-feedback" style="width: 100%;"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm" data-dismiss="modal" id="modClose2"  style="width:50%;">Close</button>
                <button class="btn btn-sm" id="accBtn" disabled style="width:50%; margin:0 auto">Set Up Account</button>
            </div>
            </div>
        </div>
    </div>
</main>

<script>
    //======================================================================
    //  VARIABLE DECLARATIONS
    //======================================================================
    let button = document.getElementById('regBtn')
    let evId = button.getAttribute('ev-id')
    let evStatus = button.getAttribute('ev-status')
    let loaderTag = document.getElementById('loader_tag')
    let loaderAllocation = document.getElementById('loader_allocation')
    let stText = document.getElementById('statustext')
    let faculty = document.getElementById('faculty')
    let category = button.getAttribute('ev-cat')
    let convFormDiv = document.getElementById('conv-form')
    let otherDiv = document.getElementById('others')
    let statFeedback = document.getElementById('invalid-feedback')
    let gno = document.getElementById('gno')
    let gdiv = document.getElementById('gdiv')
    let tregBtn = document.getElementById('tickBtn')
    let accBtn = document.getElementById('accBtn')
    let evTitle = document.getElementById('title').textContent
    let evRef = button.getAttribute('ev-ref')
    let isLoggedIn = document.getElementById('isLoggedIn').value
    let modCloseBtn1 = document.getElementById('modClose1')
    let modCloseBtn2 = document.getElementById('modClose2')
    let isModalShow = false
    let intervalId
    
    let tagBody = document.getElementById('tagBody')
    let allocationBody = document.getElementById('allocationBody')
    let csrfToken = document.getElementById('_csrf').value

    let evAllocationPayLoad
    let evTagPayLoad
    //========================================================================


    //======================================================================
    //  EVENT LISTENERS DECLARATIONS
    //======================================================================
    window.addEventListener('load', scaffoldPage)
    gno.addEventListener('keyup', buildForm)
    button.addEventListener('click', loadModal)
    tregBtn.addEventListener('click', createTicket)
    document.addEventListener('focusout', validateInput)
    accBtn.addEventListener('click', setUpUserAccount)
    modCloseBtn1.addEventListener('click', clearGabbage)
    modCloseBtn2.addEventListener('click', clearGabbage)
    //======================================================================


    //======================================================================
    //  FUNCTION DEFINITION
    //======================================================================
    async function setUpUserAccount(){
        let loader = document.createElement('img')
        loader.style.setProperty('width', '6%')
        loader.setAttribute('src', '/images/spinner.gif')

        accBtn.textContent = ''
        accBtn.append(loader)
        accBtn.setAttribute('disabled', true)

        let email = document.getElementById('email').value
        let password = document.getElementById('password').value

        let userPayLoad = {
            'email': email,
            'password': password
        }

        const save_user_response = await fetch('/user/quickregister', {
            method: 'POST',
            body: JSON.stringify(userPayLoad),
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": csrfToken
            }
        })

        const user_response = await save_user_response.json()
        
        if(user_response.status == 'User Created'){
            swal('Yaay!', "We've got you set up", "success")
            window.location.replace('/user/signin')
        }else{
            swal('Oops!', "Something went wrong", "error")
        }

        accBtn.removeChild(accBtn.firstChild)
        accBtn.textContent = 'Set Up Account'
        accBtn.removeAttribute('disabled')
    }

    function loadModal(){
        intervalId = setInterval(checkError, 500)
        if(isLoggedIn === 'true'){
            $('#ticketModal').modal('show')
        }else{
            $('#accountModal').modal('show')
        }
    }

    async function scaffoldPage(){
        if(category == 'convocation'){
            convFormDiv.style.setProperty('display', 'block')
        }else{
            otherDiv.style.setProperty('display', 'block')
            tregBtn.removeAttribute('disabled')
        }

        if (evStatus == 'private'){
            button.setAttribute('disabled', true)
            button.style.setProperty('cursor', 'not-allowed')
        }
        const get_allocations = await fetch('/allocations/'+evId, {
            method: 'GET'
        })

        evAllocationPayLoad = await get_allocations.json()
       
        const get_tags = await fetch('/tags/'+evId, {
            method: 'GET'
        })

        evTagPayLoad = await get_tags.json()

        buildPayloads(evAllocationPayLoad, evTagPayLoad)
    }

    function buildPayloads(allocationPayLoad, tagPayLoad){
        
        loaderTag.style.setProperty('display', 'none')
        tagPayLoad.forEach(tag => {
            let aTag = document.createElement('a')
            aTag.className = 'badge badge-light'
            aTag.textContent = tag.title
            tagBody.append(aTag)
        })

        loaderAllocation.style.setProperty('display', 'none')
        allocationPayLoad.forEach(allocation => {
            if (category == 'convocation'){
                //faculty scaffolding
                let option = document.createElement('option')
                option.setAttribute('value', allocation.division)
                option.textContent = allocation.division

                faculty.append(option)
            }
            //table scaffolding
            let tblRow = document.createElement('tr')
            
                let day = document.createElement('th')
                let division = document.createElement('td')
                let registered = document.createElement('td')
                let capacity = document.createElement('td')

                day.textContent = allocation.day
                day.setAttribute('scope', 'col')
                division.textContent = allocation.division
                registered.textContent = allocation.fill
                capacity.textContent = (allocation.capacity+allocation.extra)

                tblRow.append(day)
                tblRow.append(division)
                tblRow.append(registered)
                tblRow.append(capacity)
        
            allocationBody.append(tblRow)
    })
    }

    function buildForm(e){
        statFeedback.style.setProperty('display', 'none')
        
        while(gdiv.firstChild)
            gdiv.removeChild(gdiv.firstChild)

        let no = e.target.value
        if (no < 0){
            statFeedback.textContent = 'Gaurdian cannot be less than 0'
            statFeedback.style.setProperty('display', 'block')
        }
        if (no > 2){
            statFeedback.textContent = 'Gaurdian cannot be more than 2'
            statFeedback.style.setProperty('display', 'block')
        }
        if (no > 0 && no < 3){
                       
            for(let x = 0; x < no; x++){
                let div = document.createElement('div')
                div.className = 'input-group input-group-sm mb-3'
                    let input = document.createElement('input')
                    input.setAttribute('type', 'text')
                    input.setAttribute('placeholder', 'Enter guardian fullname')
                    input.setAttribute('id', 'g'+(x+1))
                    input.setAttribute('name', 'gaurdianbox')
                    input.className = 'form-control'

                    let invalidDiv = document.createElement('div')
                    invalidDiv.className = 'invalid-feedback'
                div.append(input)
                div.append(invalidDiv)
                
                gdiv.append(div)
            }

            tregBtn.removeAttribute('disabled')
        }
    }
    
    //<img src="/images/spinner.gif" alt="" style="width:6%;display:none;" id="tbtnloader">
    async function createTicket(){
        let loader = document.createElement('img')
        loader.style.setProperty('width', '6%')
        loader.setAttribute('src', '/images/spinner.gif')


        let payload = {}

        //==========> Category Payload <================================
        if (category == 'convocation'){
            let faculty = document.getElementById('faculty').value
            
            //validate select
            if(faculty != 'Select Faculty'){
                tregBtn.textContent = ''
                tregBtn.append(loader)
                tregBtn.setAttribute('disabled', true)
                
                let gaurdians = document.getElementsByName('gaurdianbox')
                let extra = ''
                Array.from(gaurdians).forEach(input => {
                    extra += input.value+','
                })
                
                payload = {
                    'event': evId,
                    'category': category,
                    'faculty': faculty,
                    'extra': extra
                }    

                const save_ticket_response = await fetch('/tickets/', {
                    method: 'POST',
                    body: JSON.stringify(payload),
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": csrfToken
                    }
                })

                const ticket_response = await save_ticket_response.json()
                if(ticket_response.status == 'Ticket Saved')
                    window.location.replace('/tickets/'+evTitle+'/'+evRef)
                else
                    swal("Oops!", ticket_response.status, "error")

                tregBtn.removeChild(tregBtn.firstChild)
                tregBtn.textContent = 'Get My Ticket'
                tregBtn.removeAttribute('disabled')
            }else{
                swal("Oops", "Faculty cannot be empty", "error")
            }
        }else{
            tregBtn.textContent = ''
            tregBtn.append(loader)
            tregBtn.setAttribute('disabled', true)

            payload = {
                "event": evId,
                "category": category
            }

            const save_ticket_response = await fetch('/tickets/', {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": csrfToken
                }
            })

            const ticket_response = await save_ticket_response.json()
            if(ticket_response.status == 'Ticket Saved')
                window.location.replace('/tickets/'+evTitle+'/'+evRef)
            else
                swal("Oops!", ticket_response.status, "error")

            tregBtn.removeChild(tregBtn.firstChild)
            tregBtn.textContent = 'Get My Ticket'
            tregBtn.removeAttribute('disabled')
        }
       
    }
    //======================================================================

//================================================================================================
//      INPUTS VALIDATION
//================================================================================================
    let errorList = []
    let startValidating = false
    
    function validateInput(e){
        if(e.target.classList.contains('form-control')){
            startValidating = true
            let input = e.target
            let errBlock = input.parentElement.children[1]
            inputId = input.getAttribute('id')
            switch (inputId){
                case ('g1'):
                    checkInputValidity('Gaurdian 1 fullname', input.value, 5, 30, errBlock)
                    break
                case ('g2'):
                    checkInputValidity('Gaurdian 2 fullname', input.value, 5, 30, errBlock)
                    break
                case ('email'):
                    checkInputValidity('Email', input.value, 0, 0, errBlock, true)
                    break
                case ('password'):
                    checkInputValidity('Password', input.value, 5, 30, errBlock)
                    break
                default:
                    break
            }
        }
    }

    async function checkInputValidity(element='', value='', minlen=0, maxlen=0, errorBlockElement, isEmail){
       
        if(isEmail){
            var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            let isValid = re.test(value)
            if(!isValid){
                let err = 'Email is not valid'
                pushError(err, errorBlockElement)
                if(errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block' 
            }else{
                let err = 'Email is not valid'
                removeError(err, errorBlockElement)

                if(errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'
            }

            const check_email_response = await fetch('/user/check-email/'+value, {
                method: 'GET', 
                headers : {
                    "X-CSRF-TOKEN": csrfToken
                } 
            })
            
            isEmailExist = await check_email_response.json()
            
            if(isEmailExist){
                let err = 'Email already in use'
                pushError(err, errorBlockElement)
                if(errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block' 
            }else{
                let err = 'Email already in use'
                removeError(err, errorBlockElement)

                if(errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'
            }
        }
        else{    
            if(value.length < minlen){
                let err = element+' cannot be less than '+minlen
                pushError(err, errorBlockElement)
                if(errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            }else{
                let err = element+' cannot be less than '+minlen
                removeError(err, errorBlockElement)

                if(errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none' 
            }
            
            if(value.length > maxlen){
                let err = element+' cannot be more than '+maxlen
                pushError(err, errorBlockElement)
                if(errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            }else{
                let err = element+' cannot be more than '+maxlen
                removeError(err, errorBlockElement)

                if(errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none' 
            }
        }
    }

    function pushError(errMsg='', errBlock){
        let errtxt = document.createElement('p')
        errtxt.textContent = errMsg
        if(!errorList.includes(errMsg)){
            errorList.push(errMsg)
        }
        //check err block child does not contain the content
        let isContainErrorMsg = false
        Array.from(errBlock.children).forEach(element => {
            isContainErrorMsg = element.textContent == errMsg
        })
        
        !isContainErrorMsg && errBlock.append(errtxt)
    }

    function removeError(errMsg='', errBlock){
        if(errorList.includes(errMsg)){
            let errIdx = errorList.indexOf(errMsg)
            errorList.splice(errIdx, 1)
        }
        let isContainErrorMsg = true
        Array.from(errBlock.children).forEach(element => {
            isContainErrorMsg = element.textContent == errMsg
            isContainErrorMsg && errBlock.removeChild(element)
        })
    }

    function checkError(){
        console.log('ckecking')
        if(startValidating && tregBtn ){
            if(errorList.length > 0){
                tregBtn.disabled = true
            }else{
                if(tregBtn.disabled)
                    tregBtn.disabled = false
            }
        }

        if(startValidating && accBtn){
            if(errorList.length > 0){
                accBtn.disabled = true
            }else{
                if(accBtn.disabled)
                    accBtn.disabled = false
            }
        }
    }

    function clearGabbage(){
        clearInterval(intervalId)
    }

</script>