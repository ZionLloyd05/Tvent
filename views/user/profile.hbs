<div class="container" style="margin-top:7%;">
    {{#if hasErrors}}
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        {{# each messages}}
        {{this}}<br />
        {{/each}}
    </div>
    {{/if}}
    <form action="/user/update" method="post">
        <h4 class="display-4" style="font-size:40px;margin-bottom:5px;">
            Your Profile
        </h4>
        <hr>
        <div class="row">
            <div class="col-3">
                <div class="svgg">
                    <svg viewBox="0 0 24 24" data-reactid="124">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M5.2 19.1c1-2.8 3.7-4.7 6.7-4.7s5.7 1.9 6.7 4.7c-4.1 2.5-9.3 2.5-13.4 0zm16.1-1.9c-.5.5-1.1 1-1.7 1.5a8.15 8.15 0 0 0-7.6-5.2c-3.3 0-6.3 2.1-7.6 5.1-.6-.4-1.1-.9-1.6-1.4l-.8.7C4.8 20.6 8.4 22 12 22s7.2-1.4 10-4.1l-.7-.7zM12 2C9.2 2 7 4.2 7 7s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 9c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"
                            data-reactid="125"></path>
                    </svg>
                </div>
                <p style="text-align:center">{{session.email}}</p>
            </div>
            <div class="col-8">
                <ul class="nav nav-tabs" style="margin-bottom:25px;">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="tab" href="#userinfo" role="tab"
                            aria-controls="pills-home">About You</a>
                    </li>
                </ul>
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="userinfo" role="tabpanel">
                        <div class="row">
                            <div class="col-6 mb-3">
                                <div class="form-group">
                                    <label for="firstName">First name</label>
                                    <input type="text" class="form-control" name="firstname" id="firstName"
                                        placeholder="{{user.firstname}}" value="" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-6 mb-3">
                                <div class="form-group">
                                    <label for="lastname">Last name</label>
                                    <input type="text" class="form-control" name="lastname" id="lastname"
                                        placeholder="{{user.lastname}}" value="" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-6 mb-3">
                                <div class="form-group">
                                    <label for="email">Email</label>
                                    <input type="text" class="form-control" name="email" id="email"
                                        placeholder="{{user.email}}" value="" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-6 mb-3">
                                <div class="form-group">
                                    <label for="password">Password</label>
                                    <input type="password" class="form-control" name="password" id="password"
                                        placeholder="" value="" required>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                            <div class="col-6">
                                <button class="btn signupbtn mt-3" id="gpwd">Initiate Graphical Password</button>
                            </div>
                            <div class="col-6">
                                <button type="submit" class="btn signupbtn mt-3" id="signupbtn">Update
                                    Information</button>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="_csrf" name="_csrf" value="{{ csrfToken }}">
                <input type="hidden" name="id" value="{{user._id}}">
                {{!-- <img src="/images/loader3.gif" style="width:10%;" alt="" class="src"><br> --}}


            </div>
        </div>
        {{!-- {{csrfToken}}  --}}
    </form>
</div>

<div id="grids2">
    <p><b>Graphical Password Modal</b>
    </p>
</div>

<script>
    'use strict'
    let errorList = []
    let csrfToken = document.getElementById('_csrf').value
    document.addEventListener('focusout', validateInput)
    let submitBtn = document.getElementById('signupbtn')

    let pointsArr = []

    function validateInput(e) {
        if (e.target.classList.contains('form-control')) {
            let input = e.target
            let errBlock = input.parentElement.children[2]
            inputId = input.getAttribute('id')
            switch (inputId) {
                case ('firstName'):
                    checkInputValidity('Firstname', input.value, 3, 20, errBlock)
                    break
                case ('lastname'):
                    checkInputValidity('Lastname', input.value, 3, 20, errBlock)
                    break
                case ('password'):
                    checkInputValidity('Password', input.value, 8, 50000, errBlock)
                    break
                case ('email'):
                    checkInputValidity('Email', input.value, 0, 0, errBlock, true)
                    break
                default:
                    break
            }
        }
    }

    function checkInputValidity(element = '', value = '', minlen = 0, maxlen = 0, errorBlockElement, isEmail) {
        if (isEmail) {
            var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            let isValid = re.test(value)
            if (!isValid) {
                let err = 'Email is not valid'
                pushError(err, errorBlockElement)
                if (errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            } else {
                let err = 'Email is not valid'
                removeError(err, errorBlockElement)

                if (errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'
            }

            if (value != '') {
                let err = 'Email cannot be empty'
                removeError(err, errorBlockElement)

                if (errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'

                fetch('/user/check-email/' + value, {
                    method: 'GET',
                    headers: {
                        "X-CSRF-TOKEN": csrfToken
                    }
                }).then(res => res.json())
                    .then(response => {
                        if (response) {
                            let err = 'Email already in use'
                            pushError(err, errorBlockElement)
                            if (errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                                errorBlockElement.style.display = 'block'
                        } else {
                            let err = 'Email already in use'
                            removeError(err, errorBlockElement)

                            if (errorBlockElement.style.display == 'block' && errorList.length < 1)
                                errorBlockElement.style.display = 'none'
                        }
                    })
                    .catch(error => console.error('Error:', error))

            } else if (value == '') {
                let err = 'Email cannot be empty'
                pushError(err, errorBlockElement)
                if (errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            }
        } else {
            if (value.length < minlen) {
                let err = element + ' cannot be less than ' + minlen
                pushError(err, errorBlockElement)
                if (errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            } else {
                let err = element + ' cannot be less than ' + minlen
                removeError(err, errorBlockElement)

                if (errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'
            }

            if (value.length > maxlen) {
                let err = element + ' cannot be more than ' + maxlen
                pushError(err, errorBlockElement)
                if (errorBlockElement.style.display == 'none' || errorBlockElement.style.display == '')
                    errorBlockElement.style.display = 'block'
            } else {
                let err = element + ' cannot be more than ' + maxlen
                removeError(err, errorBlockElement)

                if (errorBlockElement.style.display == 'block' && errorList.length < 1)
                    errorBlockElement.style.display = 'none'
            }

        }

    }

    function pushError(errMsg = '', errBlock) {
        let errtxt = document.createElement('p')
        errtxt.textContent = errMsg
        if (!errorList.includes(errMsg)) {
            errorList.push(errMsg)
        }
        //check err block child does not contain the content
        if (errBlock != null) {
            let isContainErrorMsg = false
            Array.from(errBlock.children).forEach(element => {
                isContainErrorMsg = element.textContent == errMsg
            })

            !isContainErrorMsg && errBlock.append(errtxt)
        }
    }

    function removeError(errMsg = '', errBlock) {
        if (errorList.includes(errMsg)) {
            let errIdx = errorList.indexOf(errMsg)
            errorList.splice(errIdx, 1)
        }
        if (errBlock != null) {
            let isContainErrorMsg = true
            Array.from(errBlock.children).forEach(element => {
                isContainErrorMsg = element.textContent == errMsg
                isContainErrorMsg && errBlock.removeChild(element)
            })
        }
    }

    function checkError() {
        if (submitBtn) {
            if (errorList.length > 0) {
                submitBtn.disabled = true
            } else {
                if (submitBtn.disabled)
                    submitBtn.disabled = false
            }
        }
    }

    let intervalId = setInterval(checkError, 1000);

    if (!submitBtn)
        clearInterval(intervalId)

    let dropArea = document.getElementById('grids2')

    window.addEventListener('load', function () {

        let err = 'Graphical password must be initialized'
        let errorBlockElement = null
        pushError(err, errorBlockElement)

        let initializerBtn = document.getElementById('gpwd')

        initializerBtn.addEventListener('click', function (e) {
            e.preventDefault()
            let txt = initializerBtn.textContent

            if (txt == 'Initiate Graphical Password') {
                dropArea.style.setProperty('display', 'block')
                initializerBtn.textContent = 'Save Pattern'
            }

            if (txt == 'Save Pattern') {
                let typedPassword = document.getElementById('password').value
                if (typedPassword == '') {
                    alert("Kindly fill out your text based password")
                } else {
                    if (pointsArr.length == 0) {
                        alert("Graphical password has not been set")
                    } else {
                        let err = 'Graphical password must be initialized'
                        let errorBlockElement = null
                        removeError(err, errorBlockElement)
                        pointsArr.unshift(typedPassword)
                        let combinedPassword = pointsArr.join('')
                        document.getElementById('password').value = combinedPassword
                        dropArea.style.setProperty('display', 'none')
                    }
                }

            }
        })

        $("#clearButton").on("click", function () {
            $("#grids").html(" ")
        })

            // preventing default  behaviours and stopping the events from bubbling up
            ;
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false)
        })

            // adding highlight class on dragenter and dropover
            ;
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false)
        })

            // removing highlight class on dragenter and dropover
            ;
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false)
        })

    })

    // kicks off when user drops the file
    dropArea.addEventListener('drop', handleDrop, false)

    // getting clicked points
    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('grid')) {
            let btnId = e.target.getAttribute('id')

            let grid = document.getElementById(btnId)
            grid.style.transform = 'scale(0.85)'
            grid.style.background = '#18862178'

            // points.push(e.target.x, e.target.y)
            //pointsArr.push(grid.offsetTop + '' + grid.offsetLeft)
            pointsArr.push(e.target.getAttribute('data'))
        }
    })

    function generate() {
        let value = 10

        let content = ""
        let num = 1
        for (let i = 1; i <= value; i++) {
            for (let j = 1; j <= 5; j++) {
                if (j === 1) {
                    content += "<div class='row'><div class='grid' data='" + num + "' id='grid" + num + "'></div>"
                } else if (j === 5) {
                    content += "<div class='grid' data='" + num + "' id='grid" + num + "'></div></div>"
                } else {
                    content += "<div class='grid' data='" + num + "' id='grid" + num + "'></div>"
                }
                num++
            }
        }
        $("#grids2").html(content)
    }

    function preventDefaults(e) {
        e.preventDefault()
        e.stopPropagation()
    }


    function highlight(e) {
        dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
        dropArea.classList.remove('highlight')
    }

    function handleDrop(e) {
        let dt = e.dataTransfer
        let files = dt.files

        handleFiles(files)
    }

    function handleFiles(files) {
        ([...files]).forEach(file => {
            // console.log(file)
            loadFile(file)
        })
    }

    function loadFile(file) {

        if (file.type == 'image/jpeg' || file.type == 'image/png') {
            dropArea.textContent = ''
            dropArea.textContent = 'Loading your image...'
            let reader = new FileReader()
            reader.readAsDataURL(file)
            reader.onloadend = function () {
                dropArea.style.backgroundImage = "url(" + reader.result + ")"
                generate()
                dropArea.style.height = 'auto'
                dropArea.style.setProperty('width', '350px')
                dropArea.style.padding = '0'
            }
        } else {
            dropArea.textContent = ''
            dropArea.textContent = 'File type is not supported; Sorry -_^'
        }
    }
</script>